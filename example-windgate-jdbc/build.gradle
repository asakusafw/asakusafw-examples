group 'com.asakusafw.example.jdbc'

buildscript {
    repositories {
        maven { url 'http://asakusafw.s3.amazonaws.com/maven/releases' }
        maven { url 'http://asakusafw.s3.amazonaws.com/maven/snapshots' }
    }
    dependencies {
        classpath group: 'com.asakusafw.spark', name: 'asakusa-spark-gradle', version: '0.3.3-SNAPSHOT'
    }
}

apply plugin: 'asakusafw-sdk'
apply plugin: 'asakusafw-organizer'
apply plugin: 'asakusafw-mapreduce'
apply plugin: 'asakusafw-spark'
apply plugin: 'eclipse'

configurations {
    jdbcDriver
}

dependencies {
    compile group: 'com.asakusafw.sdk', name: 'asakusa-sdk-core', version: asakusafw.asakusafwVersion
    compile group: 'com.asakusafw.sdk', name: 'asakusa-sdk-directio', version: asakusafw.asakusafwVersion
    compile group: 'com.asakusafw.sdk', name: 'asakusa-sdk-windgate', version: asakusafw.asakusafwVersion
    testRuntime group: 'com.asakusafw.sdk', name: 'asakusa-sdk-test-emulation', version: asakusafw.asakusafwVersion

    jdbcDriver group: 'postgresql', name: 'postgresql', version: '9.1-901-1.jdbc4'
}

asakusafwOrganizer {
    windgate.retryableEnabled true
    assembly.into('') {
        put 'src/dist/common'
    }
    assembly.into('windgate/plugin') {
        put configurations.jdbcDriver
    }
}

task setupDDL << {
    def profileWindGate = new Properties()
    file("${System.env.ASAKUSA_HOME}/windgate/profile/asakusa.properties").withInputStream {
        stream -> profileWindGate.load(stream)
    }

    ant.sql(
        driver: profileWindGate['resource.jdbc.driver'],
        url: profileWindGate['resource.jdbc.url'],
        userid: profileWindGate['resource.jdbc.user'],
        password: profileWindGate['resource.jdbc.password'],
        encoding: 'UTF-8',
        classpath: configurations.jdbcDriver.asPath) {
        fileset(dir: 'src/main/sql')
    }
}
